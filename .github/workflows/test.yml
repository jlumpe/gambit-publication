name: Test

on:
#  push:
#  pull_request:
  # Only run when manually triggered
  workflow_dispatch:
    inputs:
      gambitVersion:
        description: "Tag or commit in GAMBIT repo to install from"
        required: true
        default: "master"
      # Note - values of "boolean" inputs are actually 'true'/'false' strings
      # https://github.com/actions/runner/issues/1483
      invalidateCondaCache:
        description: "Invalidate cached Conda environment"
        required: true
        type: boolean
      invalidateDataCache:
        description: "Invalidate cached source data"
        required: true
        type: boolean
      snakemakeRules:
        description: "Snakemake rules to test"
        required: true
        default: "main"


jobs:
  test:

    runs-on: ubuntu-latest

    defaults:
      run:
        # Need to run login shell to have conda environment initialized
        shell: bash -l {0}

    env:
      SNAKEMAKE_OPTS: "-p --show-failed-logs --config test=1"
      DATA_CACHE_PATHS: |
        resources/genomes/.download
        resources/genomes/set3-common/fastq
        resources/genomes/set5/fasta
        resources/gambit-db/db-genomes.gdb
        resources/gambit-db/db-signatures.gs

    steps:

      - uses: actions/checkout@v2

      # Typically would evaluate these expressions for 'with: path:' in the restore step, and the
      # key from that step's output for use in the save step
      # But the restore step can be skipped based on workflow input, so we need a separate job that
      # always runs to set the keys
      - name: Set cache keys
        id: cache-keys
        run: |
          echo "::set-output name=conda::conda-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('env.yaml') }}"
          echo "::set-output name=data::data-${{ runner.os }}-${{ runner.arch }} }}"

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: gambit-pub
          use-mamba: true

      - name: Restore Conda environment
        id: restore-conda
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: ${{ env.CONDA }}/envs
          key: ${{ steps.cache-keys.outputs.conda }}
        if: github.event.inputs.invalidateCondaCache != 'true'

      - name: Update Conda environment
        run: |
          mamba env update -n gambit-pub -f env.yaml
          mamba install -n gambit-pub Cython gcc
        if: steps.restore-conda.outputs.cache-hit != 'true'

      - name: Save conda environment
        id: cache-conda
        uses: martijnhols/actions-cache/save@v3
        with:
          path: ${{ env.CONDA }}/envs
          key: ${{ steps.cache-keys.outputs.conda }}
        if: steps.restore-conda.outputs.cache-hit != 'true'

      # Environment setup done

      - name: Install GAMBIT
        run: |
          conda activate gambit-pub
          pip install git+https://github.com/jlumpe/gambit.git@$GAMBIT_VERSION
        env:
          GAMBIT_VERSION: ${{ github.event.inputs.gambitVersion }}

      - name: Restore source data
        id: restore-data
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: ${{ env.DATA_CACHE_PATHS }}
          key: ${{ steps.cache-keys.outputs.data }}
        if: github.event.inputs.invalidateDataCache != 'true'

      - name: Download source data
        run: snakemake --cores 1 fetch_src_data ${{ env.SNAKEMAKE_OPTS }}
        if: steps.restore-data.outputs.cache-hit != 'true'

      - name: Save source data
        id: cache-data
        uses: martijnhols/actions-cache/save@v3
        with:
          path: ${{ env.DATA_CACHE_PATHS }}
          key: ${{ steps.cache-keys.outputs.data }}
        if: steps.restore-data.outputs.cache-hit != 'true'

      - name: Run workflow
        run: |
          snakemake --cores all ${{ github.event.inputs.snakemakeRules }} ${{ env.SNAKEMAKE_OPTS }}
